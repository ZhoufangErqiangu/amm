//! Error types
use num_derive::FromPrimitive;
use solana_program::{decode_error::DecodeError, program_error::ProgramError};
use thiserror::Error;

/// Errors that may be returned by the StakePool program.
#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum AmmError {
    /// This program address is invalid.
    #[error("InvalidProgramAddress")]
    InvalidProgramAddress,
    /// The owner of the input isn't set to the program address generated by the program.
    #[error("InvalidOwner")]
    InvalidOwner,
    #[error("ExpectedMint")]
    ExpectedMint,
    #[error("ExpectedAccount")]
    ExpectedAccount,
    /// The provided token program does not match the token program expected
    #[error("The provided token program does not match the token program expected")]
    InvalidTokenProgramId,
    /// Invalid instruction number passed in
    #[error("Invalid instruction")]
    InvalidInstruction,
    /// Invalid Sign Account
    #[error("Invalid Sign Account")]
    InvalidSignAccount,
    /// The base valut account input is invalid.
    #[error("InvalidVault")]
    InvalidVault,
    /// mint not match
    #[error("InvalidMint")]
    InvalidMint,
    /// The pool status is invalid.
    #[error("InvalidStatus")]
    InvalidStatus,
    /// Insufficient funds
    #[error("Insufficient funds")]
    InsufficientFunds,
    /// The input is invalid.
    #[error("InvalidInput")]
    InvalidInput,
    #[error("PoolExist")]
    PoolExist,
    #[error("PoolLock")]
    PoolLock,
    #[error("InvalidAmount")]
    InvalidAmount,
    #[error("NoFee")]
    NoFee,
    #[error("InvalidDirection")]
    InvalidDirection,
    #[error("CalculationError")]
    CalculationError,
    #[error("NoughtTransfer")]
    NoughtTransfer,
}
impl From<AmmError> for ProgramError {
    fn from(e: AmmError) -> Self {
        ProgramError::Custom(e as u32)
    }
}
impl<T> DecodeError<T> for AmmError {
    fn type_of() -> &'static str {
        "Amm Error"
    }
}
