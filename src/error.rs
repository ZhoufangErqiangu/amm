//! Error types

use num_derive::FromPrimitive;
use solana_program::{decode_error::DecodeError, program_error::ProgramError};
use thiserror::Error;

/// Errors that may be returned by the StakePool program.
#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum AmmError {
    /// The account cannot be initialized because it is already being used.
    #[error("AlreadyInUse")]
    AlreadyInUse,
    /// This program address is invalid.
    #[error("InvalidProgramAddress")]
    InvalidProgramAddress,
    #[error("ExpectedMint")]
    ExpectedMint,
    // #[error("Account is frozen")]
    // AccountFrozen,
    #[error("ExpectedAccount")]
    ExpectedAccount,
    /// The user account owner input must be the user wallet.
    #[error("InvalidUserOwner")]
    InvalidUserOwner,
    /// The base valut account input is invalid.
    #[error("InvalidVault")]
    InvalidVault,
    /// The provided token program does not match the token program expected
    #[error("The provided token program does not match the token program expected")]
    InvalidTokenProgramId,
    /// The pool token mint has a freeze authority.
    #[error("Pool token mint has a freeze authority")]
    InvalidFreezeAuthority,
    /// Invalid Sign Account
    #[error("Invalid Sign Account")]
    InvalidSignAccount,
    /// The pool status is invalid.
    #[error("InvalidStatus")]
    InvalidStatus,
    /// The initialized token has a delegate.
    #[error("InvalidDelegate")]
    InvalidDelegate,
    /// The provided token account has a close authority.
    #[error("Token account has a close authority")]
    InvalidCloseAuthority,
    /// Invalid instruction number passed in
    #[error("Invalid instruction")]
    InvalidInstruction,
    /// The number of account provided does not match the expectations
    #[error("Wrong accounts number")]
    WrongAccountsNumber,
    /// Insufficient funds
    #[error("Insufficient funds")]
    InsufficientFunds,
    /// The input is invalid.
    #[error("InvalidInput")]
    InvalidInput,
    /// The owner of the input isn't set to the program address generated by the program.
    #[error("InvalidOwner")]
    InvalidOwner,
    /// The initialized pool had a non zero supply.
    #[error("InvalidSupply")]
    InvalidSupply,
    /// Out of Slippage
    #[error("Out of Slippage")]
    OutOfSlippage,
    /// Base Mint not match
    #[error("Base Mint not match")]
    BaseMintNoMatch,
    /// token mint account not match
    #[error("Trade Token Mint not match")]
    InvalidTokenMint,
    /// manager not match
    #[error("Manager not match")]
    InvalidManager,
    /// balance is not zero
    #[error("balance not zero")]
    InvalidBalance,
    /// mint not match
    #[error("InvalidMint")]
    InvalidMint,
    /// cannot write
    #[error("SAP account is not writable")]
    CannotWrite,
    /// ooracle product missmatch
    #[error("OracleProductMissMatch")]
    OracleProductMissMatch,
    /// ooracle price missmatch
    #[error("OraclePriceMissMatch")]
    OraclePriceMissMatch,
    #[error("InvalidLType")]
    InvalidLType,
    #[error("ManagerSypMissMatch")]
    ManagerSypMissMatch,
    #[error("SypVaultMissMatch")]
    SypVaultMissMatch,
    #[error("AmmPoolExist")]
    AmmPoolExist,
    #[error("AmmPoolLock")]
    AmmPoolLock,
    #[error("InvalidAmount")]
    InvalidAmount,
    #[error("AmmPoolNotPreMint")]
    AmmPoolNotPreMint,
    #[error("PreMintLimit")]
    PreMintLimit,
    #[error("NoFee")]
    NoFee,
}
impl From<AmmError> for ProgramError {
    fn from(e: AmmError) -> Self {
        ProgramError::Custom(e as u32)
    }
}
impl<T> DecodeError<T> for AmmError {
    fn type_of() -> &'static str {
        "Sap Error"
    }
}
